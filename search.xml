<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Contrastive Learning based Vision-Language Pre-Training</title>
      <link href="/2023/06/04/VLP/"/>
      <url>/2023/06/04/VLP/</url>
      
        <content type="html"><![CDATA[<center><h1>基于对比学习的多模态预训练方法</h1></center><center><h2>——以Vision-Language PTMs为例<h2></center><blockquote><p>前记：这篇文章是我在面试中科大毛震东老师组时写的一份报告，整理一下2023年之前基于对比学习的多模态预训练模型文献。算是给我的<code>Image-to-Poem</code>项目做的一个综述性调查，给自己一个方向。</p></blockquote><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">随着大量图像-文本对数据集的涌现，使用对比学习进行多模态模型预训练的方法也愈发成熟。</span><br><span class="line">在本文中，我们首先介绍了图像-文本对比学习任务(ITC)，</span><br><span class="line">接着按照时间线回顾了CLIP、ALBEF、BLIP&amp;BLIP2三个重要的多模态预训练模型。</span><br><span class="line">最后，鉴于多模态预训练模型强大的性能，我们尝试了Image-to-Poem的特殊字幕生成任务。</span><br></pre></td></tr></table></figure><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a><em>1. Introduction</em></h2><p>最近的工作证明，使用互联网中的大量图像-文本对进行多模态模型预训练可以显著提升模型的表征提取能力和泛化性能，但也对图像表征(Representation)和文本表征的融合提出了挑战。如何将图像表征与文本表征进行匹配是重要的问题。</p><p>基本地，这里将多模态模型预训练过程分为3个阶段：</p><ol><li>将图像和文本分别编码为保留语义的表示向量(latent representations)；</li><li>设计一个模型或结构，来模拟两种模式的交融；</li><li>设计有效的预训练任务来预训练Vision-Language Pre-Trained Model.</li></ol><p>图像-文本对比学习(ITC)作为一种有效的预训练任务，欲将成对的图像-文本对的表示向量尽可能地拉近，而将不成对的负例样本对(negatives)的表示向量尽可能地远离。一般地，对比学习的损失函数(image-to-text为例)可表示为如下形式：</p><script type="math/tex; mode=display">\mathcal{L}_{\text{i2t}} = -\Bbb{E}_{(W,V)\in \mathcal{D}}\left[\log\frac{s_\theta (\pmb{h}_v, \pmb{h}_w)}{\sum_{W'} s_\theta (\pmb{h}_v, \pmb{h}_{w'})} \right] \tag{1}</script><p>其中，$(W, V)$是图像-文本对数据集的一个样本，是关于$V$的负样本，$\textit{\pmb{h}}$是图像或文本的表征向量。在后续对多模态的各个预训练模型的调研中，可以发现上述对比学习思想和损失函数很少被改变；但是为了提升ITC任务的有效性，很多方法被引入，例如：正负样本对的定义、ITC任务的出现时机(如align before fusing)、Momentum Distillation等，这将在后续章节详细讨论。</p><p><img src="./VLP/1.png" alt="图1. 多模态模型结构分类"></p><center>图1. 多模态模型结构分类</center><p>考虑到多模态模型结构具有多样性，需要对后续讨论的模型作一定的限制。根据主流分类，多模态模型分为单流(single-stream)和多流(dual-stream)两类，如图1所示。单流模型通常直接将图像编码向量和文本编码向量<strong>直接拼接</strong>，再接入融合编码器(通常是transformer结构)训练。显然，此类结构不适合引入ITC任务进行预训练，故将其剔除。</p><h2 id="2-Approach"><a href="#2-Approach" class="headerlink" title="2 Approach"></a><em>2 Approach</em></h2><h3 id="2-1-CLIP-Contrastive-Language-Image-Pre-training"><a href="#2-1-CLIP-Contrastive-Language-Image-Pre-training" class="headerlink" title="2.1 CLIP - Contrastive Language-Image Pre-training"></a>2.1 CLIP - Contrastive Language-Image Pre-training</h3><p>我们首先介绍CLIP模型，是因为其是第一个使用对比学习而将zero-shot分类任务做到先进性能的。CLIP模型借用自然语言处理领域中使用自回归方式进行无监督训练的思想，意图用大量的文本监督信号训练视觉模型。</p><p>具体而言，CLIP模型的对比学习正负样本对定义比较简单：对于一个包含N个图像-文本对的batch数据，正样本为每张图像及其对应的文本(N个)，而其他任意的图像-文本组合都作为负样本(N(N-1)个)。训练方法如图2所示。</p><p><img src="./VLP/2.png" alt="图2. CLIP模型预训练方法(图左)和zero-shot方法(图右)"></p><center>图2. CLIP模型预训练方法(图左)和zero-shot方法(图右)</center><p>从对比学习算法角度，模型通过几下几步进行训练：</p><ol><li>模态内编码：文本通过Text-Encoder编码为文本表示向量，图像通过Image-Encoder编码为图像表示向量。</li><li>模态间融合：即文本表示向量和图像表示向量的点积，计算相似度。</li><li>对比损失计算：这里使用CrossEntropy Loss作为损失。</li></ol><p>从上述简洁的训练步骤，亦可看出在数据规模足够大的前提下，对比学习是非常有潜力的。除了性能上的优异，对比学习给大模型预训练还带来了以下几个优势：</p><ol><li>训练效率的提升。以往工作表明，在ImageNet上训练一个大模型(<code>ResNeXt101-32x48d</code>)需要大量训练资源，像在4亿图文数据的开放视觉识别任务上，效率更是非常重要。与图像生成对应文本的预训练任务相比，对比学习能够提升至少4倍的效率。</li><li>Zero-shot能力的展现。对比学习通过拉近相关的图像和文本编码，从而使得每张图片总能找到最佳匹配的类别标签，并且不会像监督学习那样受到类别标签的限制。</li></ol><p>尽管CLIP模型的训练方法使得其在分类任务、图文检索任务上有出色的表现，但由于模态间的融合有限(仅仅是相似度计算和对比学习)，很难在QA或者生成任务上有比较好的性能。</p><h3 id="2-2-ALBEF-ALign-the-image-and-text-representation-BEfore-Fusing"><a href="#2-2-ALBEF-ALign-the-image-and-text-representation-BEfore-Fusing" class="headerlink" title="2.2 ALBEF - ALign the image and text representation BEfore Fusing"></a>2.2 ALBEF - ALign the image and text representation BEfore Fusing</h3><p>ALBEF模型的研究动机是极其具有价值的，并且给基于对比学习的多模态预训练做了一个有效过渡，成为了一个新的范式。具体而言，该模型从模型和数据2个角度做了改进：</p><ol><li>模型结构层面：指出利用目标检测器进行区域图像特征抽取的办法，由于文本embedding和图像embedding并未对齐而使得模态融合成为挑战；而利用巨大数据集进行对比学习的方法(如CLIP)也因融合不足而无法应用在更多任务上。</li><li>数据层面：web收集的图像-文本对含有大量噪声，直接进行对比学习可能会过拟合噪声样本。</li></ol><p>图3展示了ALBEF模型的结构。和CLIP模型相似，该模型引入12层的<code>ViT-B16</code>结构作为图像编码器，并引入BERT结构作为文本编码器。不同的是，BERT被拆为了前六层的文本编码器和后六层的multimodal融合器，既体现了融合编码器的重要性，也体现了图像编码器更为重要的实践结论。ALBEF的预训练包含3个任务，因为篇幅限制，我们重点讨论ITC任务。</p><p>首先讨论ITC任务的执行时间：align before fusing。这使得单模态编码器提前学习到低维单模态表示，进而实现更容易的模态融合。</p><p><img src="./VLP/3.png" alt="图3. ALBEF模型架构"></p><center>图3. ALBEF模型架构</center><p>其次讨论ITC任务的正负样本对定义。借鉴MOCO论文的思想，作者将对比学习看作构建动态字典。以image-to-text角度为例，首先构建一个队列queue用以存放text数据(即key)，然后每一个image数据(即query)都进行字典查找：query总与匹配的key相似(正样本对)，而与其他key相异(负样本对)。在实际的ITC任务中，query是用image-Encoder编码的图像向量，而key则是用一个相同或相近的Encoder(被称为Momentum Model)编码的文本向量。最终的对比损失为：</p><script type="math/tex; mode=display">\mathcal{L}_{\text{itc}} = \frac{1}{2}\Bbb{E}_{(I,T)\sim \mathcal{D}}\left[H\left(\pmb{y}^{\text{i2t}}(I), \pmb{p}^{\text{i2t}}(I) \right), H\left(\pmb{y}^{\text{t2i}}(T), \pmb{p}^{\text{t2i}}(T) \right) \right]\tag{2}</script><p>最后我们讨论Momentum Distillation。用于预训练的图像-文本对通常是noisy的：正样本对很可能是弱相关的，而负样本对也可能相互匹配。那么简单地使用对比学习的one-hot label(正负2个类别)将会惩罚所有的负样本对，忽略那些更好的描述文本。因此引入soft label是必要的，具体地，利用Momentum Model生成图像-文本相似度(即soft label)作为伪标签，和ITC任务生成的图像-文本相似度计算KL散度，衡量两者的相似性。可以看出，动量蒸馏鼓励模型捕获那些稳定的语义信息表示，并最大化那些具有相似语义的图像和文本的互信息。加入Momentum Distillation(MoD)后，对比损失更新为：</p><script type="math/tex; mode=display">\mathcal{L}_{\text{itc}}^{\text{mod}} = (1-\alpha)\mathcal{L}_{\text{itc}} + \frac{\alpha}{2}\Bbb{E}_{(I,T)\sim \mathcal{D}}\left[\text{KL}\left(\pmb{q}^{\text{i2t}}(I) \Vert \pmb{p}^{\text{i2t}}(I) \right), H\left(\pmb{q}^{\text{t2i}}(T)\Vert \pmb{p}^{\text{t2i}}(T) \right) \right]\tag{3}</script><h3 id="2-3-BLIP-–-Bootstrapping-Language-Image-Pre-training"><a href="#2-3-BLIP-–-Bootstrapping-Language-Image-Pre-training" class="headerlink" title="2.3 BLIP – Bootstrapping Language-Image Pre-training"></a>2.3 BLIP – Bootstrapping Language-Image Pre-training</h3><p>BLIP系列模型设计的初衷，是实现统一的视觉语言理解和生成预训练，以弥补现有模型(Encoder-Based &amp; Encoder-Decoder)的不足。</p><p><figure class="half">    <img src="./VLP/4.png">    <img src="./VLP/4-2.png"></figure></p><center>图4. BLIP模型结构(左)和BLIP2模型结构(右)</center><p>对于BLIP模型(图4左)，它在ALBEF的基础上加入了权值共享，并将MLM任务替换为LM任务以加强模型生成的性能。在ITC任务上，其依旧应用了Momentum Model，以保证文本和视觉特征空间的对齐。此外，论文提出的CapFilt方法不仅可以提高数据集的质量，还可以增加数据集数量，大幅增强了预训练模型的性能，成为了多模态数据处理的新范式。</p><p>BLIP-2模型(图4右)期望使用图像和文本单模态里的先进的大规模预训练模型来提供高质量的单模态特征，并保证计算效率足够高。于是它们冻结了Image Encoder和LLM，通过两阶段的预训练步骤取得了先进结果：</p><ol><li>使用轻量的模块Q-Former从image Encoder中捕捉包含丰富文本信息的视觉特征；</li><li>使用冻结的LLM进行语言生成任务。</li></ol><p>有趣的是，Q-Former结构并不直接对图像特征和文本特征进行对比学习，而是定义了一组<code>learned query</code>(如图5所示)，在和Image Encoder的编码向量进行cross-attention后，与文本向量进行对比学习。这被认为是在提取与文本信息高度对应的视觉表示。同时为防止信息泄露，文本信息和query经过了<code>Uni-modal self-attention mask</code>。</p><p><img src="./VLP/5.png" alt="图5. BLIP2模型的Q-Former示意图"></p><center>图5. BLIP2模型的Q-Former示意图</center><p>最后，BLIP2没有延续Momentum Distillation，这是因为冻结的Image Encoder无需反向传播(即Encoder无需变化)，无需动量变化，而且节省了GPU的容量，可以容纳更多的样本。因此in-batch的负样本就已经足够。关于BLIP2中有趣细节因篇幅原因不再展示。</p><h2 id="3-Our-Work"><a href="#3-Our-Work" class="headerlink" title="3 Our Work"></a>3 Our Work</h2><p>基于对比学习的多模态预训练模型因为捕获了丰富的多模态表征，展现出了强大性能，使得Image captioning成为可能。我们尝试进行图像生成古诗，一种特殊的字幕生成任务。该项目(Image2Poem)已在近期开源至：<a href="https://github.com/weiji-Feng/Image2Poem。">https://github.com/weiji-Feng/Image2Poem。</a></p><blockquote><p>如果你希望了解项目细节(可能性不大)，你可以点击上面的github链接，也可以跳转到我的另一篇博客<br><strong><a href="https://weiji-feng.github.io/2023/05/23/Image2Poem/">&lt;暗格&gt;Image-to-Poem</a></strong>.</p></blockquote><h3 id="3-1-Pre-training-Datasets"><a href="#3-1-Pre-training-Datasets" class="headerlink" title="3.1 Pre-training Datasets"></a>3.1 Pre-training Datasets</h3><p>根据现有资源，我们搜集了109727首来自各时期的绝句，并给出每首古诗的关键词。我们将数据保存为.json格式，每个样本的形式如下所示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;dynasty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tang&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王维&quot;</span><span class="punctuation">,</span>   </span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;清浅白沙滩|绿蒲尚堪把|家住水东西|浣纱明月下&quot;</span><span class="punctuation">,</span>   </span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;白石滩&quot;</span><span class="punctuation">,</span>   </span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="string">&quot;清浅 明月 东西 白沙&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><br>我们筛选了数据集中的关键词，组成了6000余个核心关键词集合。</p><h3 id="3-2-Model-Architecture"><a href="#3-2-Model-Architecture" class="headerlink" title="3.2 Model Architecture"></a>3.2 Model Architecture</h3><p>由于图像-古诗对数据的匮乏，我们的初代版本使用两阶段的生成方式。</p><p>如图6所示，我们通过两个步骤进行推理：</p><ol><li>CLIP编码：我们首先将关键词集合通过text encoder进行编码，保存以供多次使用。其次，将感兴趣的图像通过image encoder编码，获得图像embedding。我们比较图像embedding和所有关键词embedding的相似度，选择top-k个关键词作为古诗生成的prefix。</li><li>Decoder生成古诗：利用BERT tokenizer对prefix进行分词，进而通过预训练的Decoder模型生成古诗。</li></ol><p><img src="./VLP/6.png" alt=""></p><center>图6. CLIP + Decoder的Image2Poem结构</center><p>我们预训练了2个版本的生成式模型：<code>GPT2</code>(Decoder型)和<code>T5</code>(Encoder-Decoder型)。我们将keywords作为模型的输入，期望模型生成符合要求的古诗。训练期间，我们加入一定的MLM策略：对诗中出现在关键词中的字，我们采用15%的概率进行mask掩码，期望让模型学会在古诗生成中包含关键词。</p><h3 id="3-3-Model-Improvement"><a href="#3-3-Model-Improvement" class="headerlink" title="3.3 Model Improvement"></a>3.3 Model Improvement</h3><p>要做模型的改进，我们认为核心是收集高质量图像-古诗对数据集。我们准备进行如下两阶段的数据集获取：</p><ol><li>利用预训练的BLIP2/Chinese-CLIP进行图文检索，获取古诗的对应相关图像；</li><li>对于匹配度不高的图像-古诗对数据，我们考虑Stable Diffusion生成的方式。</li></ol><p>拥有数据后，我们使用图7的结构进行端到端的预训练方式。具体而言：我们冻结预训练的CLIP模型参数和GPT2模型参数，只训练transformer-based的Mapping Network。借鉴BLIP2的思想，我们期望Mapping Network可以对齐图像编码空间和GPT2的文本空间。与BLIP2类似，我们设计了一个固定的learned queries，与CLIP图像编码器的输出进行融合(使用concatenate或者cross-attention)，再将输出作为prefix embedding提供给GPT2模型。</p><p><img src="./VLP/7.png" alt=""></p><p><center>图7. 改进的Image2Poem结构</center><br>由于还在进行图像-古诗数据的检索，还没能对改进的结构进行测试，但我们相信这个改进是有意义的。</p>]]></content>
      
      
      <categories>
          
          <category> multi-modal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Large-Language-Model For Math</title>
      <link href="/2023/06/03/Survey4MATH/"/>
      <url>/2023/06/03/Survey4MATH/</url>
      
        <content type="html"><![CDATA[<h1 id="Large-Language-Model-For-Math"><a href="#Large-Language-Model-For-Math" class="headerlink" title="Large-Language-Model For Math"></a>Large-Language-Model For Math</h1><p>让LLM大模型解决数学问题！ — #TODO</p><p>由于最近在做相关方向的科研，将阅读的论文整理在这里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">💡 阅读记录格式:</span><br><span class="line"></span><br><span class="line">### Pretraining</span><br><span class="line"></span><br><span class="line">1. which foundation models are based on?</span><br><span class="line">2. what tokenizers are adopted?</span><br><span class="line">3. which datasets are collected specific for &quot;math&quot;?</span><br><span class="line">4. what types of pre-processing methods are introduced?</span><br><span class="line">5. other information that  you think is important</span><br><span class="line"></span><br><span class="line">### Fine-tuning</span><br><span class="line"></span><br><span class="line">1. which datasets are used?</span><br><span class="line">2. what types of pre-processing methods are used?</span><br><span class="line"></span><br><span class="line">### Evaluation</span><br><span class="line"></span><br><span class="line">1. which datasets are used?</span><br><span class="line">2. what type of pre-processing methods are used?</span><br><span class="line">3. what evaluation metrics are used?</span><br></pre></td></tr></table></figure><h3 id="阅读的论文列表："><a href="#阅读的论文列表：" class="headerlink" title="阅读的论文列表："></a>阅读的论文列表：</h3><p><a href="https://www.notion.so/Training-Verifiers-to-Solve-Math-Word-Problems-db6822f1cf9b45ad960b1dbb574ab4b8">Training Verifiers to Solve Math Word Problems</a></p><p><a href="https://www.notion.so/Solving-Quantitative-Reasoning-Problems-with-Language-Models-19b339fda58246fbadb22166a78b6ffd">Solving Quantitative Reasoning Problems with Language Models</a></p><p><a href="https://www.notion.so/MathPrompter-Mathematical-Reasoning-using-Large-Language-Models-92db0f041ac94c53884e799948af207d">MathPrompter: Mathematical Reasoning using Large Language Models</a></p><p><a href="https://www.notion.so/PAL-Program-aided-Language-Models-ddaecc337f414b8ea37985999bdec23c">PAL: Program-aided Language Models</a></p><p><a href="https://www.notion.so/Specializing-Smaller-Language-Models-towards-Multi-Step-Reasoning-6e8af05836f243058cc8d2374162c2c6">Specializing Smaller Language Models towards Multi-Step Reasoning</a></p>]]></content>
      
      
      <categories>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image2Poem</title>
      <link href="/2023/05/23/Image2Poem/"/>
      <url>/2023/05/23/Image2Poem/</url>
      
        <content type="html"><![CDATA[<h1 id="Image-to-Poem"><a href="#Image-to-Poem" class="headerlink" title="Image-to-Poem"></a>Image-to-Poem</h1><p>此情此景，何不吟诗一首？Image-to-Poem帮你完成！</p><p>项目链接：<br><a href="https://github.com/weiji-Feng/Image2Poem">https://github.com/weiji-Feng/Image2Poem</a></p><p>9.28之前可能会忙于升学，本项目暂不更新。希望可以在10.31号之前完成这个项目的全部功能。</p><h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h2><p>图像生成古诗(Image to Poem)，旨在为给定的图像自动生成符合图像内容的古诗句。</p><p>使用对比学习预训练的CLIP模型拥有良好的迁移应用和zero-shot能力，是打通图像-文本多模态的重要模型之一。 本项目使用<a href="https://github.com/openai/CLIP">CLIP模型</a>生成古诗意象关键词向量和图像向量。</p><p>初始版本的生成方法为：搜集一个古诗词意象关键词数据集(close-set)，然后通过text-encoder(图1.右) 生成对应的关键词向量。对给定的一张图像，同样通过Image-encoder即可得到图像向量。比较图像向量和每个关键词向量的余弦相似度，可以得到top-k个相关关键词。将关键词送入语言模型，自动生成一首诗。</p><p>这种提取关键词的操作将<strong>会大大损失图像的语义信息</strong>，进而影响语言模型的古诗生成。但由于图像-古诗对数据集非常匮乏，我们很难&lt;/u&gt;像Dalle模型一样&lt;/u&gt;，直接将CLIP模型Image-encoder的输出向量，通过一个MappingNet(在DALLE-2中就是prior模块)送入解码器(语言模型)。所以如果有更好的想法欢迎指点。<br><img src="https://github.com/openai/CLIP/raw/main/CLIP.png" alt="img.png"></p><p>由于古诗的特殊性，本项目重头训练了一个用于生成古诗文的Language Model，尝试了T5 model（223M）和GPT2 model（118M），现公开该预训练模型以供大家娱乐。</p><p>以上模型均可通过调用 <a href="https://github.com/huggingface/transformers">https://github.com/huggingface/transformers</a> 的<code>transformers</code>导入。</p><h2 id="2-引用和致谢"><a href="#2-引用和致谢" class="headerlink" title="2. 引用和致谢"></a>2. 引用和致谢</h2><p>在项目完成期间，我参考并使用了以下项目，这里表示感谢！ </p><ul><li>数据集来源：<a href="https://github.com/THUNLP-AIPoet/CCPM">https://github.com/THUNLP-AIPoet/CCPM</a></li><li>CLIP预训练模型来源： <a href="https://github.com/OFA-Sys/Chinese-CLIP">https://github.com/OFA-Sys/Chinese-CLIP</a></li><li>GPT2预训练部分代码：<a href="https://github.com/Morizeyao/GPT2-Chinese">https://github.com/Morizeyao/GPT2-Chinese</a></li></ul><h2 id="3-使用说明和生成样例"><a href="#3-使用说明和生成样例" class="headerlink" title="3. 使用说明和生成样例"></a>3. 使用说明和生成样例</h2><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio</span><br><span class="line">pip install transformers</span><br><span class="line">pip install tqdm matplotlib</span><br></pre></td></tr></table></figure><p>如果希望尝试预训练语言模型, 建议安装<code>torch+cudaxx.x</code>的GPU版本。</p><h3 id="快速体验古诗生成"><a href="#快速体验古诗生成" class="headerlink" title="快速体验古诗生成"></a>快速体验古诗生成</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python img2poem.py --image_path ./datasets/images/feiliu.jpg --model_type T5 --model_path ./config/t5_config</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>--image_path</code>: 图片所在位置</li><li><code>--model_type</code>: 模型名称,目前可选用’T5’,’GPT2’</li><li><code>--model_path</code>: 模型所在文件夹</li></ul><h3 id="生成样例"><a href="#生成样例" class="headerlink" title="生成样例"></a>生成样例</h3><p><img src="https://github.com/weiji-Feng/Image2Poem/raw/main/datasets/images/feiliu.jpg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">飞鹤度湖山，青松半掩关。水林昼景凤，诸君自有闲。</span><br><span class="line">白苹洲渚流，丹青未有人。水林壑夜深，乱峰高几重。 </span><br><span class="line">仙人问道踪，壑深自坐禅。丹青一片云，月随风水林。   </span><br><span class="line">不见青林路，却忆庐陵西。老松犹未分，钟山水似难。</span><br><span class="line">飞鹤度湖山，青松半掩关。丹壑千人在，犹记林水心。</span><br></pre></td></tr></table></figure><p><img src="https://github.com/weiji-Feng/Image2Poem/raw/main/datasets/images/chun.jpg" alt="image-20230408233621777" style="zoom:30%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">青碧绕瑶池，碧峰回九关。晚风吹画船，映水长成芳。</span><br><span class="line">犹自在藏新，不知是旧人。暮天三百年，桃源一片春。</span><br><span class="line">数年三两枝，却羡玉龙飞。桃源水一津，斜晖又一年。</span><br><span class="line">千骑鹤归飞，一曲茅亭去。天上桃源路，玉龙归白杳。</span><br><span class="line">相逢一笑飞，知有桃源人。何如写玉龙，斜晖送晚风</span><br></pre></td></tr></table></figure><p><img src="https://github.com/weiji-Feng/Image2Poem/raw/main/datasets/images/pubu.jpg" alt="image-20230408233621777" style="zoom:90%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">清江起玉龙，时听瀑布声。飞曲满游子，一生天上流。</span><br><span class="line">萧然见山来，却恐归来晚。时见布泉飞，锦囊深掩门。</span><br><span class="line">时有一花村，俗人如此山。月溪风乱鸣，时有瀑布还。</span><br><span class="line">月明闲送风，瀑布飞仙雪。人间几度林，锦衣还说天。 </span><br><span class="line">谁人识此中，布泉老客行。月满江来路，不须频为谁。</span><br></pre></td></tr></table></figure><h2 id="4-一些解释"><a href="#4-一些解释" class="headerlink" title="4. 一些解释"></a>4. 一些解释</h2><ul><li>对于当前项目的评价<blockquote><p>提取关键词进行古诗生成是一个<strong>损失信息</strong>的过程，尤其是将图像映射到关键词的操作，损失了图像原本的语义(例如只能识别人，而不知道人在做什么)。所以效果上来看仍然差强人意。</p><p>没有给模型一些关于韵律、题材、体裁等的设定，导致不够专业。</p></blockquote></li><li><p>可不可以使用自己的古诗数据集尝试预训练？</p><blockquote><p>可以，不过由于CCPM数据集是<code>.json</code>文件格式,导入方式与<code>.txt</code>不同。所以在<code>datasets.py</code>文件里你需要重新写一下有关文件导入的部分。并且由于预训练方法多样，你也可以修改预训练时的一些策略。</p></blockquote></li><li><p>项目的预训练方法是什么？</p><blockquote><p>首先对于GPT2模型，常规预训练方法就是自回归，本项目尝试了mask关键词的方法，例如：</p><p><code>[CLS]关键词：明月 故乡 [EOS] 举头望明月，低头思故乡[SEP]</code> =&gt; <code>[CLS]关键词：明月 故乡 [EOS] 举头望[MASK][MASK]，低头思[MASK][MASK][SEP]</code></p><p>然后我额外对这些mask token的预测准确率进行了计算，加入了损失函数中。</p><p>对于T5模型，由于是encoder-decoder架构，我使用下列格式创建数据：</p><p>x = <code>[CLS]关键词：红豆 南国 发 愿君[EOS][SEP]</code>, y = <code>[CLS]红豆生南国[EOS][SEP]</code></p><p>x = <code>[CLS]关键词：红豆 南国 发 愿君[EOS]红豆生南国[EOS][SEP]</code>, y = <code>[CLS]秋来发故枝[EOS][SEP]</code></p><p>x = <code>[CLS]关键词：红豆 南国 发 愿君[EOS]红豆生南国[EOS]秋来发故枝[EOS][SEP]</code>, y = <code>[CLS]愿君多采撷[EOS][SEP]</code></p><p>x = <code>[CLS]关键词：红豆 南国 发 愿君[EOS]红豆生南国[EOS]秋来发故枝[EOS]愿君多采撷[EOS][SEP]</code>, y = <code>[CLS]此物最相思[EOS][SEP]</code></p></blockquote></li><li><p>通过什么方式进行图像生成古诗？未来有什么进一步更新的方法？</p><blockquote><p>现在的实现比较简单，就是先搜集一个闭环的关键词数据集(<code>keyword.txt</code>)，然后使用CLIP对图像和所有关键词进行编码，计算它们之间的相似度，取相似度最高的K个关键词，然后放置于语言模型进行生成。</p><p>由于<code>图像-古诗对</code>数据集非常匮乏，似乎暂时做不到删去这个闭环关键词数据集。未来如果有充足的数据集，我会使用<code>CLIP-MappingNet-T5/GPT2</code>的模型架构进行训练，例如下图的<a href="https://arxiv.org/pdf/2111.09734.pdf">CLIPCap</a>架构：</p><p><img src="https://cdn-images-1.medium.com/max/800/1*8RLzDpMfi6sLScqx2SguaA.png" alt=""></p></blockquote></li></ul><p>未来有古诗生成图像的想法，待进一步更新。现有的可以进行古诗生成图像的项目有：<a href="https://huggingface.co/IDEA-CCNL/Taiyi-Diffusion-532M-Nature-Chinese">https://huggingface.co/IDEA-CCNL/Taiyi-Diffusion-532M-Nature-Chinese</a></p>]]></content>
      
      
      <categories>
          
          <category> multi-modal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
